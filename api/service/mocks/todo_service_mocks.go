// Code generated by MockGen. DO NOT EDIT.
// Source: service/todo_service.go
//
// Generated by this command:
//
//	mockgen -source=service/todo_service.go -destination=./service/mocks/todo_service_mocks.go
//
// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	dto "github.com/GorbachR/todo-app/api/data/dto"
	model "github.com/GorbachR/todo-app/api/data/model"
	gomock "go.uber.org/mock/gomock"
)

// MockITodoService is a mock of ITodoService interface.
type MockITodoService struct {
	ctrl     *gomock.Controller
	recorder *MockITodoServiceMockRecorder
}

// MockITodoServiceMockRecorder is the mock recorder for MockITodoService.
type MockITodoServiceMockRecorder struct {
	mock *MockITodoService
}

// NewMockITodoService creates a new mock instance.
func NewMockITodoService(ctrl *gomock.Controller) *MockITodoService {
	mock := &MockITodoService{ctrl: ctrl}
	mock.recorder = &MockITodoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoService) EXPECT() *MockITodoServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITodoService) Create(arg0 context.Context, arg1 model.Todo) (model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret1
}

// Create indicates an expected call of Create.
func (mr *MockITodoServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodoService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockITodoService) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockITodoServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITodoService)(nil).Delete), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockITodoService) FindAll(arg0 context.Context, arg1 dto.GetTodosQueryParams) ([]model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].([]model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockITodoServiceMockRecorder) FindAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockITodoService)(nil).FindAll), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockITodoService) FindOne(arg0 context.Context, arg1 int) (model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockITodoServiceMockRecorder) FindOne(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockITodoService)(nil).FindOne), arg0, arg1)
}

// ReorderInsert mocks base method.
func (m *MockITodoService) ReorderInsert(arg0 context.Context, arg1 dto.ReorderPosTodoParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReorderInsert", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret1
}

// ReorderInsert indicates an expected call of ReorderInsert.
func (mr *MockITodoServiceMockRecorder) ReorderInsert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReorderInsert", reflect.TypeOf((*MockITodoService)(nil).ReorderInsert), arg0, arg1)
}

// Update mocks base method.
func (m *MockITodoService) Update(arg0 context.Context, arg1 int, arg2 model.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret1
}

// Update indicates an expected call of Update.
func (mr *MockITodoServiceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITodoService)(nil).Update), arg0, arg1, arg2)
}

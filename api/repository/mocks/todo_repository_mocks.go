// Code generated by MockGen. DO NOT EDIT.
// Source: repository/todo_repository.go
//
// Generated by this command:
//
//	mockgen -source=repository/todo_repository.go -destination=./repository/mocks/todo_repository_mocks.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	dto "github.com/GorbachR/todo-app/api/data/dto"
	model "github.com/GorbachR/todo-app/api/data/model"
	gomock "go.uber.org/mock/gomock"
)

// MockITodoRepository is a mock of ITodoRepository interface.
type MockITodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITodoRepositoryMockRecorder
}

// MockITodoRepositoryMockRecorder is the mock recorder for MockITodoRepository.
type MockITodoRepositoryMockRecorder struct {
	mock *MockITodoRepository
}

// NewMockITodoRepository creates a new mock instance.
func NewMockITodoRepository(ctrl *gomock.Controller) *MockITodoRepository {
	mock := &MockITodoRepository{ctrl: ctrl}
	mock.recorder = &MockITodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoRepository) EXPECT() *MockITodoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITodoRepository) Create(arg0 context.Context, arg1 model.Todo) (model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret1
}

// Create indicates an expected call of Create.
func (mr *MockITodoRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodoRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockITodoRepository) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockITodoRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITodoRepository)(nil).Delete), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockITodoRepository) FindAll(arg0 context.Context, arg1 dto.GetTodosQueryParams) ([]model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].([]model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockITodoRepositoryMockRecorder) FindAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockITodoRepository)(nil).FindAll), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockITodoRepository) FindOne(arg0 context.Context, arg1 int) (model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockITodoRepositoryMockRecorder) FindOne(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockITodoRepository)(nil).FindOne), arg0, arg1)
}

// ReorderInsert mocks base method.
func (m *MockITodoRepository) ReorderInsert(arg0 context.Context, arg1 dto.ReorderPosTodoParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReorderInsert", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret1
}

// ReorderInsert indicates an expected call of ReorderInsert.
func (mr *MockITodoRepositoryMockRecorder) ReorderInsert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReorderInsert", reflect.TypeOf((*MockITodoRepository)(nil).ReorderInsert), arg0, arg1)
}

// Update mocks base method.
func (m *MockITodoRepository) Update(arg0 context.Context, arg1 int, arg2 model.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret1
}

// Update indicates an expected call of Update.
func (mr *MockITodoRepositoryMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITodoRepository)(nil).Update), arg0, arg1, arg2)
}

// MockDBTX is a mock of DBTX interface.
type MockDBTX struct {
	ctrl     *gomock.Controller
	recorder *MockDBTXMockRecorder
}

// MockDBTXMockRecorder is the mock recorder for MockDBTX.
type MockDBTXMockRecorder struct {
	mock *MockDBTX
}

// NewMockDBTX creates a new mock instance.
func NewMockDBTX(ctrl *gomock.Controller) *MockDBTX {
	mock := &MockDBTX{ctrl: ctrl}
	mock.recorder = &MockDBTXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBTX) EXPECT() *MockDBTXMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockDBTX) ExecContext(arg0 context.Context, arg1 string, arg2 ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDBTXMockRecorder) ExecContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDBTX)(nil).ExecContext), varargs...)
}

// QueryContext mocks base method.
func (m *MockDBTX) QueryContext(arg0 context.Context, arg1 string, arg2 ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockDBTXMockRecorder) QueryContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockDBTX)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockDBTX) QueryRowContext(arg0 context.Context, arg1 string, arg2 ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockDBTXMockRecorder) QueryRowContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockDBTX)(nil).QueryRowContext), varargs...)
}
